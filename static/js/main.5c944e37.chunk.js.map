{"version":3,"sources":["components/Instructions/index.js","components/Home/index.js","utils/is-empty.js","components/Play/index.js","components/QuizSummary/index.js","components/HighScores/index.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","state","Helmet","id","className","to","Component","Home","isEmpty","value","undefined","Object","keys","length","trim","Play","props","displayQuestions","questions","currentQuestion","nextQuestion","previousQuestion","currentQuestionIndex","answer","setState","handleOptionClick","e","target","innerHTML","toLowerCase","correctAnswer","wrongAnswer","M","toast","html","classes","displayLength","prevState","score","correctAnswers","numberOfAnsweredQuestions","endGame","wrongAnswers","startTimer","countDownTime","Date","now","interval","setInterval","distance","minutes","Math","floor","seconds","clearInterval","time","alert","playerStats","numberOfQuestions","console","log","setTimeout","history","push","this","question","onClick","optionA","optionB","optionC","optionD","QuizSummary","location","stats","remark","userScore","style","textAlign","Highscores","App","exact","path","component","HighScores","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5c944e37.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Instructions extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <Fragment>\r\n                <Helmet>\r\n                    <title>Quiz - Instructions</title>\r\n                </Helmet>\r\n            \r\n                <div id=\"instructions\">\r\n                    <section>\r\n\r\n                        <h1>How To Play!</h1>\r\n                        \r\n                        <p className=\"explain\">The game is simple!  You will be asked a series of questions, and offered 4 possible answers.  Click the button of the answer that makes the most sense to you.  Try to answer all the questions before the time limit is up!</p>\r\n\r\n                        <div className=\"ready-or-not\">\r\n                            <button className=\"btn btn-outline-primary\" id=\"bigboy\">\r\n                                <Link to=\"/\">Back To Home</Link>\r\n                            </button>\r\n                                \r\n                            <button className=\"btn btn-outline-primary\" id=\"bigboy\">\r\n                                <Link to=\"/play/quiz\">Let's Play!</Link>\r\n                            </button>\r\n\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n\r\n            </Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Instructions;","import React, { Component, Fragment } from 'react';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\n\r\nclass Home extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n            <Fragment>\r\n                <Helmet>\r\n                    <title>Quiz - Home</title>\r\n                </Helmet>\r\n            \r\n                <div id=\"home\">\r\n                    <section>\r\n                        <div>\r\n                            <span className=\"mid mid-cube-outline\"></span>\r\n                        </div>\r\n                        \r\n                        <h1>Quiz App</h1>\r\n                        \r\n                        <div className=\"play-button-container\">\r\n                                <ul>\r\n                                    <button className=\"btn btn-outline-primary\" id=\"bigboy\">\r\n                                        <Link to=\"/play/instructions\">Play</Link>\r\n                                    </button>\r\n                                </ul>\r\n                        </div> \r\n                        \r\n                        <div className=\"auth-container\">\r\n                            <Link to=\"/highscores\">High Scores!</Link>\r\n                        </div>\r\n                    </section>\r\n                </div>\r\n\r\n            </Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Home;","const isEmpty = (value) => \r\nvalue === undefined ||\r\nvalue == null ||\r\n(typeof value === 'object' && Object.keys(value).length === 0) ||\r\n(typeof value === 'string' && value.trim().length === 0)\r\n\r\nexport default isEmpty;","import React, { Component, Fragment } from 'react';\r\nimport { Helmet } from \"react-helmet\";\r\nimport { Link } from \"react-router-dom\";\r\nimport questions from \"../questions.json\";\r\nimport isEmpty from \"../../utils/is-empty\";\r\nimport M from 'materialize-css';\r\nimport \"./style.css\";\r\nimport { isCompositeComponentWithType } from 'react-dom/test-utils';\r\n\r\nclass Play extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            questions,\r\n            currentQuestion: {},\r\n            nextQuestion: {},\r\n            previousQuestion: {},\r\n            answer: '',\r\n            numberOfQuestions: 0,\r\n            numberOfAnsweredQuestions: 0,\r\n            currentQuestionIndex: 0,\r\n            score: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n            time: {}\r\n         };\r\n         this.interval = null\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { questions, currentQuestion, nextQuestion, previousQuestion } = this.state;\r\n        this.displayQuestions(questions, currentQuestion, nextQuestion, previousQuestion);\r\n        this.startTimer();\r\n    }\r\n\r\n    componentWillUnmount () {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    displayQuestions = (questions = this.state.questions, currentQuestion, nextQuestion, previousQuestion) => {\r\n        let { currentQuestionIndex } = this.state;\r\n        if (!isEmpty(this.state.questions)) {\r\n            questions = this.state.questions;\r\n            currentQuestion = questions[currentQuestionIndex];\r\n            nextQuestion = questions[currentQuestionIndex + 1];\r\n            previousQuestion = questions[currentQuestionIndex - 1];\r\n            const answer = currentQuestion.answer;\r\n            this.setState({\r\n                currentQuestion,\r\n                nextQuestion,\r\n                previousQuestion,\r\n                answer\r\n            })\r\n        }\r\n    };\r\n\r\n    handleOptionClick = (e) => {\r\n        if(e.target.innerHTML.toLowerCase() === this.state.answer.toLowerCase()) {\r\n            this.correctAnswer();\r\n        } else {\r\n            this.wrongAnswer();\r\n        }\r\n    }\r\n\r\n    correctAnswer = () => {\r\n        M.toast({\r\n            html: 'Correct Answer!',\r\n            classes: 'toast-valid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState(prevState => ({\r\n            score: prevState.score + 1,\r\n            correctAnswers: prevState.correctAnswers + 1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex + 1,\r\n            numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions +1,\r\n        }), () => {\r\n            if(this.state.nextQuestion === undefined) {\r\n                this.endGame();\r\n            } else {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    }\r\n\r\n    wrongAnswer = () => {\r\n        M.toast({\r\n            html: 'Wrong Answer!',\r\n            classes: 'toast-invalid',\r\n            displayLength: 1500\r\n        });\r\n        this.setState(prevState => ({\r\n           wrongAnswers: prevState.wrongAnswers + 1,\r\n           currentQuestionIndex: prevState.currentQuestionIndex +1,\r\n           numberOfAnsweredQuestions: prevState.numberOfAnsweredQuestions +1,\r\n        }), () => {\r\n            if(this.state.nextQuestion === undefined) {\r\n                this.endGame();\r\n            } else {\r\n                this.displayQuestions(this.state.questions, this.state.currentQuestion, this.state.nextQuestion, this.state.previousQuestion);\r\n            }\r\n        });\r\n    }\r\n\r\n    startTimer = () => {\r\n        const countDownTime = Date.now() + 180000;\r\n        this.interval = setInterval(() => {\r\n            const now = new Date();\r\n            const distance = countDownTime - now;\r\n\r\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n            if (distance < 0) {\r\n                clearInterval(this.interval);\r\n                this.setState({\r\n                    time: {\r\n                        minutes: 0,\r\n                        seconds: 0\r\n                    }\r\n                }, () => {\r\n                    this.endGame();\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    time: {\r\n                        minutes,\r\n                        seconds,\r\n                        distance\r\n                    }\r\n                });\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    endGame = () => {\r\n        alert('Quiz has ended!');\r\n        const { state } = this;\r\n        const playerStats = {\r\n            score: state.score,\r\n            numberOfQuestions: state.numberOfQuestions,\r\n            numberOfAnsweredQuestions: state.correctAnswers + state.wrongAnswers,\r\n            correctAnswers: state.correctAnswers,\r\n            wrongAnswers: state.wrongAnswers,\r\n        };\r\n        console.log(playerStats);\r\n        setTimeout(() => {\r\n            this.props.history.push('/play/quizSummary', playerStats);\r\n        }, 1000);\r\n    }\r\n\r\n    render() { \r\n        const { \r\n            currentQuestion,\r\n            currentQuestionIndex,\r\n            numberOfQuestions,\r\n            time,\r\n            score \r\n        } = this.state;\r\n        return ( \r\n          <Fragment>\r\n              <Helmet><title>Quiz Time!</title></Helmet>\r\n\r\n              <div className=\"questions\">\r\n                  \r\n        <div className=\"question-number\">Question Number: {currentQuestionIndex + 1} of 15</div>\r\n\r\n                <div className=\"timer\">Time Remaining: {time.minutes} : {time.seconds}</div>\r\n\r\n                <div className=\"score\">Score: {score}</div>\r\n                \r\n        <h5>{ currentQuestion.question }</h5>\r\n                <div className=\"options-container\">\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionA}</p>\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\r\n                </div>\r\n                <div className=\"options-container\">    \r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionC}</p>\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionD}</p>\r\n                </div>\r\n\r\n                <div className=\"button-container\">\r\n                    <button><Link to=\"/\">Quit</Link></button>\r\n                </div>\r\n              </div>\r\n          </Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Play;","import React, { Component, Fragment } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass QuizSummary extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            score: 0,\r\n            numberOfQuestions: 0,\r\n            numberOfAnsweredQuestions: 0,\r\n            correctAnswers: 0,\r\n            wrongAnswers: 0,\r\n        };\r\n    }\r\n\r\n    componentDidMount () {\r\n        const { state } = this.props.location;\r\n        if (state) {\r\n            this.setState({\r\n                score: state.score,\r\n                numberOfQuestions: state.numberOfQuestions,\r\n                numberOfAnsweredQuestions: state.numberOfAnsweredQuestions,\r\n                correctAnswers: state.correctAnswers,\r\n                wrongAnswers: state.wrongAnswers,\r\n            });\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const { state } = this.props.location;\r\n        let stats, remark;\r\n        const userScore = this.state.score;\r\n\r\n        if (userScore <= 4 ) {\r\n            remark = 'You need more practice!';\r\n        } else if (userScore > 5 && userScore <= 8) {\r\n            remark = 'Better luck next time!';\r\n        } else if (userScore <= 8 && userScore > 10) {\r\n            remark = 'You can do better!';\r\n        } else if (userScore >= 11 && userScore <= 14) {\r\n            remark = 'You did great!';\r\n        } else {\r\n            remark = 'You\\'re an absolute genius!';\r\n        }\r\n\r\n        if (state !== undefined) {\r\n            stats = (\r\n                <Fragment>\r\n                    <div style={{ textAlign: 'center' }}>\r\n                        <span className=\"mdi mdi-check-circle-outline success-icon\"></span>\r\n                    </div>\r\n                    <h1>Quiz has ended</h1>\r\n                    <div className=\"container stats\">\r\n                        <h4>{remark}</h4>\r\n                        <h2>Your Score: {this.state.score} / 15</h2>\r\n\r\n                        <span className=\"stat left\">Number of attempted questions: </span>\r\n                        <span className=\"right\">{this.state.numberOfAnsweredQuestions}</span><br />\r\n\r\n                        <span className=\"stat left\">Number of Correct Answers: </span>\r\n                        <span className=\"right\">{this.state.correctAnswers}</span> <br />\r\n\r\n                        <span className=\"stat left\">Number of Wrong Answers: </span>\r\n                        <span className=\"right\">{this.state.wrongAnswers}</span><br />\r\n                    </div>\r\n                    <section>\r\n                        <ul>\r\n                            <li>\r\n                                <Link to =\"/play/quiz\">Play Again</Link>\r\n                            </li>\r\n                            <li>\r\n                                <Link to =\"/\">Back to Home</Link>\r\n                            </li>\r\n                            <li>\r\n                            <Link to =\"/highscores\">High Scores</Link>\r\n                            </li>\r\n                        </ul>\r\n                    </section>\r\n                </Fragment>\r\n            );\r\n        } else {\r\n            stats = (\r\n                <section>\r\n                    <h1 className=\"no-stats\">No Statistics Available</h1>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to =\"/play/quiz\">Take a Quiz</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to =\"/\">Back to Home</Link>\r\n                        </li>\r\n                        <li>\r\n                            <Link to =\"/highscores\">High Scores</Link>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n            );\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title>Quiz App - Summary</title></Helmet>\r\n                <div className=\"quiz-summary\">\r\n                    {stats}\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default QuizSummary;","import React, { Component, Fragment } from 'react';  \r\n\r\nclass Highscores extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <Fragment>\r\n\r\n            <h1>SCORES GO HERE</h1>\r\n            <ul>\r\n                <li>Player Name: Score</li>\r\n            </ul>\r\n            </Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Highscores;","import React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Instructions from './components/Instructions';\nimport Home from \"./components/Home\";\nimport Play from \"./components/Play\";\nimport QuizSummary from \"./components/QuizSummary\";\nimport HighScores from \"./components/HighScores\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/play/instructions\" component={Instructions} />\n      <Route exact path=\"/play/quiz\" component={Play} />\n      <Route exact path=\"/play/quizSummary\" component={QuizSummary} />\n      <Route exact path=\"/highscores\" component={HighScores} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}